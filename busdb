#!/usr/bin/env bash

# ============================================================================================ #
#: Title           : busdb                                                                     #
#: Sypnosis        : busdb [OPTIONS]... [ARGS]                                                 #
#: Date Created    : Tue 30 Jan 2018 07:26:31 AM +08  /  Mon Jan 29 23:26:31 UTC 2018          #
#: Last Edit       : Wed 19 Sep 2018 22:39:32 PM +08  /  Wed Sep 19 14:39:32 UTC 2018          #
#: License         : GPL3+                                                                     #
#: Version         : 1.0.2                                                                     #
#: Author          : Jason V. Ferrer '<jetchisel@opensuse.org>'                                #
#: Description     : A backup script for sqlite3 database.                                     #
#: Options         : [hfd]                                                                     #
#: Home Page       : https://github.com/Jetchisel/sdb                                          #
#: ExtComm         : file,mkdir,sqlite3                                                        #
# ============================================================================================ #

# ******************************************************************************************** #
#                                       Enable extglob.                                        #
# ******************************************************************************************** #

shopt -s extglob

# ******************************************************************************************** #
#                             The scriptname without the pathname.                             #
# ******************************************************************************************** #

script_name=${BASH_SOURCE##*/}

# ******************************************************************************************** #
#   Warn and die functions, for exit messages and default status or an optional exit status.   #
# ******************************************************************************************** #

warn() {
  printf '%s: %s\n%s\n' "$script_name" "$@"
}

die() {
  local st=$?
  case $3 in
    *[^0-9]*|'') :;;
    *) st=$3;;
  esac

  case $st in
    0) warn "$1" "$2" ;;
    *) warn "$1" "$2" >&2 ;;
  esac

  exit "$st"
}

# ******************************************************************************************** #
#               Check if bash version is lower than 4, exit with an error if true.             #
# ******************************************************************************************** #

if (( BASH_VERSINFO[0] < 4 )); then
  die 'This script requires bash 4.0 or newer' 'please update to a more recent bash.' 1
fi

# ******************************************************************************************** #
#       Parse the script itself for the value of ExtComm on the headers, first 16 lines.       #
# ******************************************************************************************** #

value=ExtComm
regex="^#:[[:space:]]+$value[[:space:]]+:[[:space:]]+(.[^#]+)[[:space:]]+#"
extcomm=

i=0
while read -r line; do
  (( i++ <= 16 )) || break
  [[ -n  $line ]] || continue
  [[ $line =~ $regex ]] && extcomm=${BASH_REMATCH[1]} && break
done < "$BASH_SOURCE"
[[ -n "${extcomm%%*( )}" ]] && IFS=, read -ra  ExtComm <<< "${extcomm%%*( )}"

# ******************************************************************************************** #
#          Check for the required app/executable is with in your PATH, exit otherwise.         #
# ******************************************************************************************** #

Missing=()
MissingMessage="is either not installed or it is not in your PATH!"
ExitMessage="Please install the following: "

if (( ${#ExtComm[@]} )); then
  for apps in "${ExtComm[@]}"; do
    if ! type -P "$apps" >/dev/null; then
      printf '%s %s\n' "$apps" "$MissingMessage" >&2
      Missing+=("$apps")
    fi
  done
fi

(( ${#Missing[@]} )) && die "$ExitMessage[${Missing[*]}]" "or add it in your PATH. exiting now!" 127

# ******************************************************************************************** #
#                               Function to show the help menu.                                #
# ******************************************************************************************** #

ShowHelp() {
  echo "
Usage: $script_name [OPTION]... [ARGUMENT]

Back up sqlite3 database.

A backup shell script for sqlite3 database.

Options:
  -h, --help      Show this help.
  -f, --file      The sqlite3 database/file to backup.
  -d, --directory The destination/directory where to backup.

Both [-f|--file], [-d|--directory] is not optional.

Example:
  -f /path/to/the/database/mydatabase -d /path/to/the/directory/whereto/backup/
  --file /path/to/the/database/mydatabase --directory /path/to/the/directory/whereto/backup/
  --file=/path/to/the/database/mydatabase --directory=/path/to/the/directory/whereto/backup/
"
}

# ******************************************************************************************** #
#   If no arguments/options is given, then show the help/usage menu and exit with an error.    #
# ******************************************************************************************** #

(($#)) || {
  ShowHelp
  exit 1
}

# ******************************************************************************************** #
#             Some variables for creating directories and backing up the database.             #
# ******************************************************************************************** #

file=0
directory=0
date=$(printf '%(%Y-%m-%d)T%s' -1)
time=$(printf '%(%H-%M-%S)T%s' -1)

# ******************************************************************************************** #
# Getops from scratch by D.J. Mills, https://github.com/e36freak/templates/blob/master/options #
# ******************************************************************************************** #

optstring=hf:d:

unset options

while (($#)); do
  case $1 in
    -[!-]?*)
      for ((i=1; i<${#1}; i++)); do
        c=${1:i:1}
        options+=("-$c")
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    --?*=*) options+=("${1%%=*}" "${1#*=}");;
    --) options+=(--endopts);;
    *) options+=("$1");;
  esac
  shift
done

set -- "${options[@]}"

unset options

# ******************************************************************************************** #
#   If first option is not empty and it does not start with a dash then exit with an error.    #
# ******************************************************************************************** #

[[ -n $1 && $1 != -?* ]] && {
  die "invalid option -- '$1'" "try '$script_name --help'" 1
}

# ******************************************************************************************** #
#                          Parse the command line arguments/options.                           #
# ******************************************************************************************** #

while [[ $1 = -?* ]]; do
  case $1 in
    --help|-\?|-h)
      ShowHelp
      exit 0
      ;;
    --file|-f)
      shift
      [[ -n $1 ]] || die "Which database?" "try '$script_name --help'" 1
      database=$1
      [[ $database = '~/'* ]] && database=$HOME${database#*?}
      if [[ $database = "~$LOGNAME"* ]]; then
        (( EUID > 0 )) && database=${HOME%"$LOGNAME"}${database#*?}
        (( EUID == 0 )) && database=/${database#*?}
      fi
      [[ -e $database ]] || die "[$database] does not exists!" "please fix the error, then try again." 1
      output=$(file -- "$database")
      [[ "$output" = *'SQLite 3.x database'* ]] || die "Something seems to be wrong with [$database]" "file_type: [$output]" 1
      file=1
      ;;
    --directory|-d)
      shift
      [[ -n $1 ]] || die "Which directory?" "backup destination not given!" 1
      destination=$1
      [[ $destination = '~/'* ]] && destination=$HOME${destination#*?}
      if [[ $destination = "~$LOGNAME"* ]]; then
        (( EUID > 0 )) && destination=${HOME%"$LOGNAME"}${destination#*?}
        (( EUID == 0 )) && destination=/${destination#*?}
      fi
      [[ -e $destination ]] || die "[$destination] does not exists!" "please fix the error, then try again." 1
      [[ -d $destination ]] || die "[$destination] is not a directory!" "please fix the error, then try again." 1
      [[ -x $destination ]] || die "Check your permissions in [$destination]." "please fix the error, then try again." 1
      [[ -w $destination ]] || die "Check your permissions in [$destination]." "please fix the error, then try again." 1
      [[ $destination = */ ]] && destination=${destination%/*}
      directory=1
      ;;
      *)
    die "invalid option -- '$1'" "try '$script_name --help'" 1
  esac
  shift
done

# ******************************************************************************************** #
#      Make the -f and -d option non-optional, so exit if those are not given/specified.       #
# ******************************************************************************************** #

((file)) || die "No database has been given!" "try '$script_name --help'" 1
((directory)) || die "No directory/destination has been given!" "try '$script_name --help'" 1

# ******************************************************************************************** #
#     Create a Master Backup directory as a date name before any database backup happens.      #
# ******************************************************************************************** #

for f in "$destination/$date" "$destination/$date/$time"; do
  if [[ ! -d "$f" ]]; then
    mkdir "$f" || die "Something went wrong!" "Could not create directory $f" 1
  fi
done

# ******************************************************************************************** #
#                   Print message if the destination directory was created.                    #
# ******************************************************************************************** #

printf '%s\n' "Created the directory $destination/$date/$time"

# ******************************************************************************************** #
#            Print some useful message before actually running the backup command.             #
# ******************************************************************************************** #

printf '%s\n' "Creating a backup for: $database" "To the directory: $destination/$date/$time/${database##*/}"

printf '%s: %s\n' "Executing" "sqlite3 $database \".backup $destination/$date/$time/${database##*/}.${date}_$time\""

# ******************************************************************************************** #
#     Finally run the backup command for the database or exit with an error if it failed.      #
# ******************************************************************************************** #

sqlite3 "$database" ".backup $destination/$date/$time/${database##*/}.${date}_$time" || exit

# ******************************************************************************************** #
#                              Print a message when all is done.                               #
# ******************************************************************************************** #

printf 'All done!%s\n'

# ============================================================================================ #
#                                   >>> END OF SCRIPT <<<                                      #
# ============================================================================================ #
